digraph "ai::_MemObject&lt; AllocatorClass &gt;"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="ai::_MemObject\< Allocator\lClass \>",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="ai::ICondition\< AI\l_ALLOCATOR_CLASS \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1ICondition.html",tooltip="A condition can be placed on a TreeNode to decide which node is going to get executed. In general they are stateless. If they are not, it should explicitly get noted. "];
  Node2 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="ai::And",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1And.html",tooltip="This condition will logically and all contained conditions. "];
  Node2 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="ai::False",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1False.html",tooltip="This condition just always evaluates to false. "];
  Node2 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="ai::Filter",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1Filter.html",tooltip="The filter condition executes some selection filters (IFilter) and evaluates to true if the resulting..."];
  Node2 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="ai::HasEnemies",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1HasEnemies.html",tooltip="This condition checks whether there are enemies. "];
  Node2 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="ai::IsCloseToGroup",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1IsCloseToGroup.html",tooltip="Checks whether the controlled AI is close to a particular group. "];
  Node2 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="ai::IsGroupLeader",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1IsGroupLeader.html",tooltip="Evaluates to true if you are the first member in a particular group. "];
  Node2 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="ai::IsInGroup",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1IsInGroup.html",tooltip="Checks whether the AI is in any or in a particular group. "];
  Node2 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="ai::Not",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1Not.html",tooltip="This condition will just swap the result of the contained condition. "];
  Node2 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="ai::Or",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1Or.html",tooltip="This condition will logically or all contained conditions. "];
  Node2 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="ai::True",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1True.html",tooltip="This condition just always evaluates to true. "];
  Node1 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="ai::movement::ISteering\l\< AI_ALLOCATOR_CLASS \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1movement_1_1ISteering.html",tooltip="Steering interface. "];
  Node13 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="ai::movement::GroupFlee",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1movement_1_1GroupFlee.html",tooltip="Flees from a particular group. "];
  Node13 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="ai::movement::GroupSeek",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1movement_1_1GroupSeek.html",tooltip="Seeks a particular group. "];
  Node13 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node16 [label="ai::movement::SelectionSteering",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1movement_1_1SelectionSteering.html",tooltip="IFilter steering interface "];
  Node16 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 [label="ai::movement::SelectionFlee",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1movement_1_1SelectionFlee.html",tooltip="Flees the current IFilter selection from the given ICharacter. "];
  Node16 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node18 [label="ai::movement::SelectionSeek",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1movement_1_1SelectionSeek.html",tooltip="Seeks the current IFilter selection from the given ICharacter. "];
  Node13 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node19 [label="ai::movement::TargetFlee",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1movement_1_1TargetFlee.html",tooltip="Flees from a particular target. "];
  Node13 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node20 [label="ai::movement::TargetSeek",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1movement_1_1TargetSeek.html",tooltip="Seeks a particular target. "];
  Node13 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node21 [label="ai::movement::Wander",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1movement_1_1Wander.html",tooltip="Moves forward in the direction the character is currently facing into. "];
  Node1 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node22 [label="ai::TreeNode\< AI_ALLOCATOR\l_CLASS \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1TreeNode.html",tooltip="The base class for all behaviour tree actions. "];
  Node22 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node23 [label="ai::Fail",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1Fail.html",tooltip="A decorator node with only one child attached. The result of the attached child is only taken into ac..."];
  Node22 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node24 [label="ai::Invert",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1Invert.html",tooltip="A node with only one child attached. The result of the attached child is inverted. "];
  Node22 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node25 [label="ai::ITask",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1ITask.html",tooltip="A node for your real actions in the behaviour tree. "];
  Node25 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node26 [label="ai::Steer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1Steer.html"];
  Node22 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node27 [label="ai::ITimedNode",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1ITimedNode.html",tooltip="A timed node is a TreeNode that is executed until a given time (millis) is elapsed. "];
  Node27 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node28 [label="ai::Idle",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1Idle.html",tooltip="ITimedNode that is just idling until the given time is elapsed. "];
  Node22 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node29 [label="ai::Limit",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1Limit.html",tooltip="A decorator node which limits the execution of the attached child to a specified amount of runs..."];
  Node22 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node30 [label="ai::Selector",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1Selector.html",tooltip="Base class for all type of TreeNode selectors. "];
  Node30 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node31 [label="ai::Parallel",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1Parallel.html",tooltip="Executes all the connected children in the order they were added (no matter what the TreeNodeStatus o..."];
  Node30 -> Node32 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node32 [label="ai::PrioritySelector",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1PrioritySelector.html",tooltip="This node tries to execute all the attached children until one succeeds. This composite only fails if..."];
  Node30 -> Node33 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node33 [label="ai::ProbabilitySelector",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1ProbabilitySelector.html",tooltip="This node executes one of the attached children randomly based on the given weights. The node is executed until it is no longer in the running state. "];
  Node30 -> Node34 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node34 [label="ai::RandomSelector",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1RandomSelector.html",tooltip="This node executes all the attached children in random order. This composite only fails if all childr..."];
  Node30 -> Node35 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node35 [label="ai::Sequence",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1Sequence.html",tooltip="The sequence continues to execute their children until one of the children returned a state that is n..."];
  Node22 -> Node36 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node36 [label="ai::Succeed",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classai_1_1Succeed.html",tooltip="A decorator node with only one child attached. The result of the attached child is only taken into ac..."];
}
