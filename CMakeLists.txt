cmake_minimum_required(VERSION 2.6)
project(SIMPLEAI C CXX)

set(SIMPLEAI_VERSION "0.1")

option(SIMPLEAI_RUN "Compile run program" ON)
option(SIMPLEAI_TEST "Compile tests" OFF)
option(SIMPLEAI_LUA "Compile with lua support" ON)
option(SIMPLEAI_EXCEPTIONS "Compile with exception support" OFF)

if (SIMPLEAI_EXCEPTIONS)
	add_definitions(-DAI_EXCEPTIONS=1)
	message(STATUS "Build with exception support")
else()
	add_definitions(-DLUA_USE_LONGJMP -DAI_EXCEPTIONS=0)
	message(STATUS "Build without exception support")
endif()

if (NOT SIMPLEAI_LUA)
	set(SIMPLEAI_RUN FALSE)
	message(STATUS "Lua is needed for the run tool")
endif()

if (${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Windows")
	set(CMAKE_CXX_STANDARD_LIBRARIES "kernel32.lib user32.lib wsock32.lib ws2_32.lib wininet.lib")
	set(CMAKE_C_STANDARD_LIBRARIES "kernel32.lib user32.lib wsock32.lib ws2_32.lib wininet.lib")
elseif (${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Darwin")
elseif (${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Linux")
	if (CMAKE_COMPILER_IS_GNUCXX)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wextra")
		set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3 -ftree-vectorize -msse3 -Wall -Wextra -DNDEBUG")
		set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g -O0 -DDEBUG -Wall -Wextra -Werror")
		if (NOT SIMPLEAI_EXCEPTIONS)
			set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-exceptions")
		endif()
	else()
		message(ERROR "unsupported compiler")
	endif()
endif()

add_subdirectory(src/ai)
add_subdirectory(src/run)
add_subdirectory(src/test)

if (SIMPLEAI_RUN)
	message(STATUS "Build the run tool")
else()
	message(STATUS "Don't build the run tool - use -DSIMPLEAI_RUN=TRUE to build it")
endif()

if (SIMPLEAI_LUA)
	message(STATUS "Build with lua support")
else()
	message(STATUS "Don't build with lua support - use -DSIMPLEAI_LUA=TRUE to enable it")
endif()

if (SIMPLEAI_TEST)
	message(STATUS "Build the tests")
else()
	message(STATUS "Don't build the tests - use -DSIMPLEAI_TEST=TRUE to build it")
endif()

find_program(DOXYGEN "doxygen")
if (DOXYGEN)
	message(STATUS "doxygen found")
else()
	message(STATUS "doxygen not found")
endif()

# TODO execute doxygen
